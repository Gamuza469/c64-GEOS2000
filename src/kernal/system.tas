
;system core functions, like those from 'main.tas' but a bit different

;17-8-99 - ACME port

_IRQHandler	CLD
		STA tempIRQAcc
		PLA
		PHA
		AND #%00010000
		BEQ IRQHand1
		PLA
		JMP (BRKVector)
		
IRQHand1	TXA
		PHA
		TYA
		PHA
		+PushB CPU_DATA
		+LoadB CPU_DATA, IO_IN
	!if (use2MHz) {
		+LoadB clkreg, 0
	}
		+PushW CallRLo
		+PushW returnAddress
		LDX #0
IRQHand2	LDA r0,x
		PHA
		INX
		CPX #32
		BNE IRQHand2
		LDA dblClickCount
		BEQ IRQHand3
		DEC dblClickCount
IRQHand3	LDY KbdQueFlag
		BEQ IRQHand4
		INY
		BEQ IRQHand4
		DEC KbdQueFlag
IRQHand4	JSR _DoKeyboardScan
		LDA alarmWarnFlag
		BEQ IRQHand5
		DEC alarmWarnFlag
IRQHand5	LDA intTopVector
		LDX intTopVector+1
		JSR CallRoutine
		LDA intBotVector
		LDX intBotVector+1
		JSR CallRoutine
		inc grirq
	!if (use2MHz) {
		lda #>IRQ2Handler
		sta $ffff
		lda #<IRQ2Handler
		sta $fffe
		+LoadB rasreg, $fc
	}
		LDX #31
IRQHand6	PLA
		STA r0,x
		DEX
		BPL IRQHand6
		+PopW returnAddress
		+PopW CallRLo
		+PopB CPU_DATA
		PLA
		TAY
		PLA
		TAX
		LDA tempIRQAcc
_NMIHandler	RTI
	!if (use2MHz) {
IRQ2Handler	pha
		txa
		pha
		ldx CPU_DATA
		+LoadB CPU_DATA, IO_IN
		lda rasreg
		and #%11110000
		beq IRQ2BordOK
		cmp #$f0
		bne IRQ2NoBord
IRQ2BordOK	+LoadB clkreg, 1
IRQ2NoBord
		+LoadB rasreg, $2c
		+LoadW $fffe, _IRQHandler
		inc grirq
		stx CPU_DATA
		pla
		tax
		pla
		rti
	}

_DoKeyboardScan
		LDA KbdQueFlag
		BNE DoKbdScan1
		LDA KbdNextKey
		JSR KbdScanHelp2
		+LoadB KbdQueFlag, 15
DoKbdScan1	+LoadB r1H, 0
		JSR KbdScanRow
		BNE DoKbdScan5
		JSR KbdScanHelp5
		LDY #7
DoKbdScan2	JSR KbdScanRow
		BNE DoKbdScan5
		LDA KbdTestTab,y
		STA cia1base+0
		LDA cia1base+1
		CMP KbdDBncTab,y
		STA KbdDBncTab,y
		BNE DoKbdScan4
		CMP KbdDMltTab,y
		BEQ DoKbdScan4
		PHA
		EOR KbdDMltTab,y
		BEQ DoKbdScan3
		JSR KbdScanHelp1
DoKbdScan3	PLA
		STA KbdDMltTab,y
DoKbdScan4	DEY
		BPL DoKbdScan2
DoKbdScan5	RTS

KbdScanRow	+LoadB cia1base+0, $ff
		+CmpBI cia1base+1, $ff
		RTS

KbdScanHelp1	STA r0L
		+LoadB r1L, 7
KbdScanHlp_10	LDA r0L
		LDX r1L
		AND BitMask2,x
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;		BEQ KbdScanHlp_19	; really dirty trick...
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		bne KbdScanHlp_101
		jmp KbdScanHlp_19
KbdScanHlp_101
		TYA
		ASL
		ASL
		ASL
		ADC r1L
		TAX
		+bbrf 7, r1H, KbdScanHlp_11
		LDA KbdDecodeTab2,x
		+bra KbdScanHlp_12
KbdScanHlp_11	LDA KbdDecodeTab1,x
KbdScanHlp_12	STA r0H
		+bbrf 5, r1H, KbdScanHlp_13
		LDA r0H
		JSR KbdScanHelp6
		CMP #"A"
		BCC KbdScanHlp_13
		CMP #"Z"+1
		BCS KbdScanHlp_13
		+subv $40
		STA r0H
KbdScanHlp_13	+bbrf 6, r1H, KbdScanHlp_14
		+smbf 7, r0H
KbdScanHlp_14	LDA r0H
		STY r0H
		LDY #8
KbdScanHlp_15	CMP KbdTab1,y
		BEQ KbdScanHlp_16
		DEY
		BPL KbdScanHlp_15
		BMI KbdScanHlp_17
KbdScanHlp_16	LDA KbdTab2,y
KbdScanHlp_17	LDY r0H
		STA r0H
		AND #%01111111
		CMP #%00011111
		BEQ KbdScanHlp_18
		LDX r1L
		LDA r0L
		AND BitMask2,x
		AND KbdDMltTab,y
		BEQ KbdScanHlp_18
		+LoadB KbdQueFlag, 15
		+MoveB r0H, KbdNextKey
		JSR KbdScanHelp2
		+bra KbdScanHlp_19
KbdScanHlp_18	+LoadB KbdQueFlag, $ff
		+LoadB KbdNextKey, 0
KbdScanHlp_19	DEC r1L
		BMI KbdScanHlp_1a
		JMP KbdScanHlp_10
KbdScanHlp_1a	RTS

KbdTab1
		!byte $db, $dd, $de, $ad, $af, $aa, $c0, $ba, $bb
KbdTab2
		!byte $7b, $7d, $7c, $5f, $5c, $7e, $60, $7b, $7d

KbdTestTab	!byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f

KbdDecodeTab1
	!byte KEY_DELETE, CR, KEY_RIGHT, KEY_F7, KEY_F1, KEY_F3, KEY_F5, KEY_DOWN
		!byte "3", "w", "a", "4", "z", "s", "e", KEY_INVALID
		!byte "5", "r", "d", "6", "c", "f", "t", "x"
		!byte "7", "y", "g", "8", "b", "h", "u", "v"
		!byte "9", "i", "j", "0", "m", "k", "o", "n"
		!byte "+", "p", "l", "-", ".", ":", "@", ","
		!byte KEY_BPS, "*", ";", KEY_HOME, KEY_INVALID, "=", "^", "/"
		!byte "1", KEY_LARROW, KEY_INVALID, "2", " ", KEY_INVALID, "q", KEY_STOP
KbdDecodeTab2
	!byte KEY_INSERT, CR, BACKSPACE, KEY_F8, KEY_F2, KEY_F4, KEY_F6, KEY_UP
		!byte "#", "W", "A", "$", "Z", "S", "E", KEY_INVALID
		!byte "%", "R", "D", "&", "C", "F", "T", "X"
		!byte "'", "Y", "G", "(", "B", "H", "U", "V"
		!byte ")", "I", "J", "0", "M", "K", "O", "N"
		!byte "+", "P", "L", "-", ">", "[", "@", "<"
		!byte KEY_BPS, "*", "]", KEY_CLEAR, KEY_INVALID, "=", "^", "?"
		!byte "!", KEY_LARROW, KEY_INVALID, $22, " ", KEY_INVALID, "Q", KEY_RUN

KbdScanHelp2	PHP
		SEI
		PHA
		+smbf KEYPRESS_BIT, pressFlag
		LDX KbdQueTail
		PLA
		STA KbdQueue,x
		JSR KbdScanHelp4
		CPX KbdQueHead
		BEQ KbdScanHlp_21
		STX KbdQueTail
KbdScanHlp_21	PLP
		RTS

KbdScanHelp3	PHP
		SEI
		LDX KbdQueHead
		LDA KbdQueue,x
		STA keyData
		JSR KbdScanHelp4
		STX KbdQueHead
		CPX KbdQueTail
		BNE KbdScanHlp_31
		+rmb KEYPRESS_BIT, pressFlag
KbdScanHlp_31	PLP
		RTS

KbdScanHelp4	INX
		CPX #16
		BNE KbdScanHlp_41
		LDX #0
KbdScanHlp_41	RTS

KbdScanHelp5	+LoadB cia1base+0, %11111101
		LDA cia1base+1
		EOR #$ff
		AND #%10000000
		BNE KbdScanHlp_51
		+LoadB cia1base+0, %10111111
		LDA cia1base+1
		EOR #$ff
		AND #%00010000
		BEQ KbdScanHlp_52
KbdScanHlp_51	+smbf 7, r1H
KbdScanHlp_52	+LoadB cia1base+0, %01111111
		LDA cia1base+1
		EOR #$ff
		AND #%00100000
		BEQ KbdScanHlp_53
		+smbf 6, r1H
KbdScanHlp_53	+LoadB cia1base+0, %01111111
		LDA cia1base+1
		EOR #$ff
		AND #%00000100
		BEQ KbdScanHlp_54
		+smbf 5, r1H
KbdScanHlp_54	RTS

KbdScanHelp6	PHA
		AND #%01111111
		CMP #"a"
		BCC KbdScanHlp_61
		CMP #"z"+1
		BCS KbdScanHlp_61
		PLA
		+subv $20
		PHA
KbdScanHlp_61	PLA
		RTS

_DoUpdateTime
		SEI
		LDX CPU_DATA
		+LoadB CPU_DATA, IO_IN
		LDA cia1base+15
		AND #%01111111
		STA cia1base+15
		LDA hour
		CMP #12
		BMI DoUpdTime1
		+bbsf 7, cia1base+11, DoUpdTime1
		JSR DateUpdate
DoUpdTime1	LDA cia1base+11
		AND #%00011111
		CMP #$12
		BNE DoUpdTime2
		LDA #0
DoUpdTime2	+bbrf 7, cia1base+11, DoUpdTime3
		SED
		+addv $12
		CLD
DoUpdTime3	JSR ConvertBCD
		STA hour
		LDA cia1base+10
		JSR ConvertBCD
		STA minutes
		LDA cia1base+9
		JSR ConvertBCD
		STA seconds
		LDA cia1base+8
		LDY #2
DoUpdTime4	LDA year,y
		STA dateCopy,y
		DEY
		BPL DoUpdTime4
		+MoveB cia1base+13, r1L
		STX CPU_DATA
		+bbrf 7, alarmSetFlag, DoUpdTime5
		AND #ALARMMASK
		BEQ DoUpdTime6
		LDA #$4a
		STA alarmSetFlag
		LDA alarmTmtVector
		ORA alarmTmtVector+1
		BEQ DoUpdTime5
		JMP (alarmTmtVector)
		
DoUpdTime5	+bbrf 6, alarmSetFlag, DoUpdTime6
		JSR DoClockAlarm
DoUpdTime6	CLI
		RTS

DateUpdate	JSR CheckMonth
		CMP day
		BEQ DateUpd1
		INC day
		RTS
DateUpd1	LDY #1
		STY day
		INC month
		LDA month
		CMP #13
		BNE DateUpd2
		STY month
		INC year
		LDA year
		CMP #100
		BNE DateUpd2
		DEY
		STY year
DateUpd2	RTS

CheckMonth	LDY month
		LDA daysTab-1, y
		CPY #2
		BNE CheckMonth2
		TAY
		LDA year
		AND #3
		BNE CheckMonth1
		INY
CheckMonth1	TYA
CheckMonth2	RTS

DoClockAlarm	LDA alarmWarnFlag
		BNE DoClkAlrm3
		LDY CPU_DATA
		+LoadB CPU_DATA, IO_IN
		LDX #24
DoClkAlrm1	LDA pingTab,x
		STA sidbase,x
		DEX
		BPL DoClkAlrm1
		LDX #$21
		LDA alarmSetFlag
		AND #%00111111
		BNE DoClkAlrm2
		TAX
DoClkAlrm2	STX sidbase+4
		STY CPU_DATA
		LDA #$1e
		STA alarmWarnFlag
		DEC alarmSetFlag
DoClkAlrm3	RTS

pingTab
		!byte $00, $10, $00, $08, $40, $08, $00, $00
		!byte $00, $00, $00, $00, $00, $00, $00, $00
		!byte $00, $00, $00, $00, $00, $00, $00, $00
		!byte $0f, $00, $0f
